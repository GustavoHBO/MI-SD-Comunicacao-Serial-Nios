vendor_name = ModelSim
source_file = 1, /home/gaut/Documents/Remote Repository/MI-SD-Comunicacao-Serial-Nios/src/modules/control_uart.v
source_file = 1, /home/gaut/Documents/Remote Repository/MI-SD-Comunicacao-Serial-Nios/src/modules/clk_divider.v
source_file = 1, /home/gaut/Documents/Remote Repository/MI-SD-Comunicacao-Serial-Nios/src/modules/UART.v
source_file = 1, /home/gaut/Documents/Remote Repository/MI-SD-Comunicacao-Serial-Nios/src/modules/uart_rx.v
source_file = 1, /home/gaut/Documents/Remote Repository/MI-SD-Comunicacao-Serial-Nios/src/modules/uart_tx.v
source_file = 1, /home/gaut/Documents/Remote Repository/MI-SD-Comunicacao-Serial-Nios/src/Uart Teste/db/teste_uart.cbx.xml
design_name = UART
instance = comp, \tx~output , tx~output, UART, 1
instance = comp, \led[0]~output , led[0]~output, UART, 1
instance = comp, \led[1]~output , led[1]~output, UART, 1
instance = comp, \led[2]~output , led[2]~output, UART, 1
instance = comp, \led[3]~output , led[3]~output, UART, 1
instance = comp, \clk~input , clk~input, UART, 1
instance = comp, \clk~inputclkctrl , clk~inputclkctrl, UART, 1
instance = comp, \reset~input , reset~input, UART, 1
instance = comp, \clk_divider|state.idle~feeder , clk_divider|state.idle~feeder, UART, 1
instance = comp, \clk_divider|state.idle , clk_divider|state.idle, UART, 1
instance = comp, \clk_divider|counter[0]~12 , clk_divider|counter[0]~12, UART, 1
instance = comp, \~GND , ~GND, UART, 1
instance = comp, \clk_divider|counter[0] , clk_divider|counter[0], UART, 1
instance = comp, \clk_divider|counter[1]~14 , clk_divider|counter[1]~14, UART, 1
instance = comp, \clk_divider|counter[1] , clk_divider|counter[1], UART, 1
instance = comp, \clk_divider|counter[2]~16 , clk_divider|counter[2]~16, UART, 1
instance = comp, \clk_divider|counter[2] , clk_divider|counter[2], UART, 1
instance = comp, \clk_divider|counter[3]~18 , clk_divider|counter[3]~18, UART, 1
instance = comp, \clk_divider|counter[3] , clk_divider|counter[3], UART, 1
instance = comp, \clk_divider|counter[4]~20 , clk_divider|counter[4]~20, UART, 1
instance = comp, \clk_divider|counter[4] , clk_divider|counter[4], UART, 1
instance = comp, \clk_divider|counter[5]~22 , clk_divider|counter[5]~22, UART, 1
instance = comp, \clk_divider|counter[5] , clk_divider|counter[5], UART, 1
instance = comp, \clk_divider|counter[6]~24 , clk_divider|counter[6]~24, UART, 1
instance = comp, \clk_divider|counter[6] , clk_divider|counter[6], UART, 1
instance = comp, \clk_divider|counter[7]~26 , clk_divider|counter[7]~26, UART, 1
instance = comp, \clk_divider|counter[7] , clk_divider|counter[7], UART, 1
instance = comp, \clk_divider|counter[8]~28 , clk_divider|counter[8]~28, UART, 1
instance = comp, \clk_divider|counter[8] , clk_divider|counter[8], UART, 1
instance = comp, \clk_divider|counter[9]~30 , clk_divider|counter[9]~30, UART, 1
instance = comp, \clk_divider|counter[9] , clk_divider|counter[9], UART, 1
instance = comp, \clk_divider|counter[10]~32 , clk_divider|counter[10]~32, UART, 1
instance = comp, \clk_divider|counter[10] , clk_divider|counter[10], UART, 1
instance = comp, \clk_divider|counter[11]~34 , clk_divider|counter[11]~34, UART, 1
instance = comp, \clk_divider|counter[11] , clk_divider|counter[11], UART, 1
instance = comp, \clk_divider|LessThan0~0 , clk_divider|LessThan0~0, UART, 1
instance = comp, \clk_divider|LessThan0~1 , clk_divider|LessThan0~1, UART, 1
instance = comp, \clk_divider|LessThan0~2 , clk_divider|LessThan0~2, UART, 1
instance = comp, \clk_divider|LessThan0~3 , clk_divider|LessThan0~3, UART, 1
instance = comp, \clk_divider|clk_out~0 , clk_divider|clk_out~0, UART, 1
instance = comp, \clk_divider|clk_out~feeder , clk_divider|clk_out~feeder, UART, 1
instance = comp, \clk_divider|clk_out , clk_divider|clk_out, UART, 1
instance = comp, \clk_divider|clk_out~clkctrl , clk_divider|clk_out~clkctrl, UART, 1
instance = comp, \uart_tx|state~7 , uart_tx|state~7, UART, 1
instance = comp, \uart_tx|state.done , uart_tx|state.done, UART, 1
instance = comp, \rx~input , rx~input, UART, 1
instance = comp, \uart_rx|state~5 , uart_rx|state~5, UART, 1
instance = comp, \uart_rx|state.idle , uart_rx|state.idle, UART, 1
instance = comp, \uart_rx|Selector2~2 , uart_rx|Selector2~2, UART, 1
instance = comp, \uart_rx|counter[0]~0 , uart_rx|counter[0]~0, UART, 1
instance = comp, \uart_rx|counter[1]~3 , uart_rx|counter[1]~3, UART, 1
instance = comp, \uart_rx|counter[1] , uart_rx|counter[1], UART, 1
instance = comp, \uart_rx|Add0~0 , uart_rx|Add0~0, UART, 1
instance = comp, \uart_rx|counter[2]~4 , uart_rx|counter[2]~4, UART, 1
instance = comp, \uart_rx|counter[2] , uart_rx|counter[2], UART, 1
instance = comp, \uart_rx|Add0~1 , uart_rx|Add0~1, UART, 1
instance = comp, \uart_rx|counter[3]~1 , uart_rx|counter[3]~1, UART, 1
instance = comp, \uart_rx|counter[3] , uart_rx|counter[3], UART, 1
instance = comp, \uart_rx|Selector2~3 , uart_rx|Selector2~3, UART, 1
instance = comp, \uart_rx|Selector2~4 , uart_rx|Selector2~4, UART, 1
instance = comp, \uart_rx|state.receving , uart_rx|state.receving, UART, 1
instance = comp, \uart_rx|counter[0]~2 , uart_rx|counter[0]~2, UART, 1
instance = comp, \uart_rx|counter[0] , uart_rx|counter[0], UART, 1
instance = comp, \uart_rx|Decoder0~0 , uart_rx|Decoder0~0, UART, 1
instance = comp, \uart_rx|Decoder0~2 , uart_rx|Decoder0~2, UART, 1
instance = comp, \uart_rx|state.done~feeder , uart_rx|state.done~feeder, UART, 1
instance = comp, \uart_rx|state.done , uart_rx|state.done, UART, 1
instance = comp, \uart_rx|Selector0~0 , uart_rx|Selector0~0, UART, 1
instance = comp, \uart_rx|ready , uart_rx|ready, UART, 1
instance = comp, \uart_tx|state~6 , uart_tx|state~6, UART, 1
instance = comp, \uart_tx|state.idle , uart_tx|state.idle, UART, 1
instance = comp, \uart_tx|dataA[7]~0 , uart_tx|dataA[7]~0, UART, 1
instance = comp, \uart_tx|counter[0]~2 , uart_tx|counter[0]~2, UART, 1
instance = comp, \uart_tx|counter[0]~4 , uart_tx|counter[0]~4, UART, 1
instance = comp, \uart_tx|counter[0] , uart_tx|counter[0], UART, 1
instance = comp, \uart_tx|counter[1]~3 , uart_tx|counter[1]~3, UART, 1
instance = comp, \uart_tx|counter[1] , uart_tx|counter[1], UART, 1
instance = comp, \uart_tx|Add0~1 , uart_tx|Add0~1, UART, 1
instance = comp, \uart_tx|counter[3]~6 , uart_tx|counter[3]~6, UART, 1
instance = comp, \uart_tx|counter[3] , uart_tx|counter[3], UART, 1
instance = comp, \uart_tx|state~5 , uart_tx|state~5, UART, 1
instance = comp, \uart_tx|counter[0]~7 , uart_tx|counter[0]~7, UART, 1
instance = comp, \uart_tx|state.sending , uart_tx|state.sending, UART, 1
instance = comp, \uart_tx|Add0~0 , uart_tx|Add0~0, UART, 1
instance = comp, \uart_tx|counter[2]~5 , uart_tx|counter[2]~5, UART, 1
instance = comp, \uart_tx|counter[2] , uart_tx|counter[2], UART, 1
instance = comp, \uart_rx|Decoder0~4 , uart_rx|Decoder0~4, UART, 1
instance = comp, \uart_rx|dataA[6]~4 , uart_rx|dataA[6]~4, UART, 1
instance = comp, \uart_rx|dataA[6] , uart_rx|dataA[6], UART, 1
instance = comp, \uart_rx|data~5 , uart_rx|data~5, UART, 1
instance = comp, \uart_rx|data[3]~1 , uart_rx|data[3]~1, UART, 1
instance = comp, \uart_rx|data[6] , uart_rx|data[6], UART, 1
instance = comp, \uart_tx|dataA[6]~feeder , uart_tx|dataA[6]~feeder, UART, 1
instance = comp, \uart_tx|dataA[7]~1 , uart_tx|dataA[7]~1, UART, 1
instance = comp, \uart_tx|dataA[6] , uart_tx|dataA[6], UART, 1
instance = comp, \uart_rx|dataA[7]~7 , uart_rx|dataA[7]~7, UART, 1
instance = comp, \uart_rx|dataA[7] , uart_rx|dataA[7], UART, 1
instance = comp, \uart_rx|data~8 , uart_rx|data~8, UART, 1
instance = comp, \uart_rx|data[7] , uart_rx|data[7], UART, 1
instance = comp, \uart_tx|dataA[7] , uart_tx|dataA[7], UART, 1
instance = comp, \uart_rx|Decoder0~7 , uart_rx|Decoder0~7, UART, 1
instance = comp, \uart_rx|dataA[4]~6 , uart_rx|dataA[4]~6, UART, 1
instance = comp, \uart_rx|dataA[4] , uart_rx|dataA[4], UART, 1
instance = comp, \uart_rx|data~7 , uart_rx|data~7, UART, 1
instance = comp, \uart_rx|data[4] , uart_rx|data[4], UART, 1
instance = comp, \uart_tx|dataA[4] , uart_tx|dataA[4], UART, 1
instance = comp, \uart_rx|Decoder0~6 , uart_rx|Decoder0~6, UART, 1
instance = comp, \uart_rx|dataA[5]~5 , uart_rx|dataA[5]~5, UART, 1
instance = comp, \uart_rx|dataA[5] , uart_rx|dataA[5], UART, 1
instance = comp, \uart_rx|data~6 , uart_rx|data~6, UART, 1
instance = comp, \uart_rx|data[5] , uart_rx|data[5], UART, 1
instance = comp, \uart_tx|dataA[5]~feeder , uart_tx|dataA[5]~feeder, UART, 1
instance = comp, \uart_tx|dataA[5] , uart_tx|dataA[5], UART, 1
instance = comp, \uart_tx|Mux0~2 , uart_tx|Mux0~2, UART, 1
instance = comp, \uart_tx|Mux0~3 , uart_tx|Mux0~3, UART, 1
instance = comp, \uart_rx|dataA[2]~2 , uart_rx|dataA[2]~2, UART, 1
instance = comp, \uart_rx|dataA[2] , uart_rx|dataA[2], UART, 1
instance = comp, \uart_rx|data~3 , uart_rx|data~3, UART, 1
instance = comp, \uart_rx|data[2] , uart_rx|data[2], UART, 1
instance = comp, \uart_tx|dataA[2]~feeder , uart_tx|dataA[2]~feeder, UART, 1
instance = comp, \uart_tx|dataA[2] , uart_tx|dataA[2], UART, 1
instance = comp, \uart_rx|Decoder0~5 , uart_rx|Decoder0~5, UART, 1
instance = comp, \uart_rx|dataA[3]~3 , uart_rx|dataA[3]~3, UART, 1
instance = comp, \uart_rx|dataA[3] , uart_rx|dataA[3], UART, 1
instance = comp, \uart_rx|data~4 , uart_rx|data~4, UART, 1
instance = comp, \uart_rx|data[3]~feeder , uart_rx|data[3]~feeder, UART, 1
instance = comp, \uart_rx|data[3] , uart_rx|data[3], UART, 1
instance = comp, \uart_tx|dataA[3] , uart_tx|dataA[3], UART, 1
instance = comp, \uart_rx|Decoder0~1 , uart_rx|Decoder0~1, UART, 1
instance = comp, \uart_rx|dataA[0]~0 , uart_rx|dataA[0]~0, UART, 1
instance = comp, \uart_rx|dataA[0] , uart_rx|dataA[0], UART, 1
instance = comp, \uart_rx|data~0 , uart_rx|data~0, UART, 1
instance = comp, \uart_rx|data[0] , uart_rx|data[0], UART, 1
instance = comp, \uart_tx|dataA[0] , uart_tx|dataA[0], UART, 1
instance = comp, \uart_rx|Decoder0~3 , uart_rx|Decoder0~3, UART, 1
instance = comp, \uart_rx|dataA[1]~1 , uart_rx|dataA[1]~1, UART, 1
instance = comp, \uart_rx|dataA[1] , uart_rx|dataA[1], UART, 1
instance = comp, \uart_rx|data~2 , uart_rx|data~2, UART, 1
instance = comp, \uart_rx|data[1] , uart_rx|data[1], UART, 1
instance = comp, \uart_tx|dataA[1]~feeder , uart_tx|dataA[1]~feeder, UART, 1
instance = comp, \uart_tx|dataA[1] , uart_tx|dataA[1], UART, 1
instance = comp, \uart_tx|Mux0~0 , uart_tx|Mux0~0, UART, 1
instance = comp, \uart_tx|Mux0~1 , uart_tx|Mux0~1, UART, 1
instance = comp, \uart_tx|Selector0~0 , uart_tx|Selector0~0, UART, 1
instance = comp, \uart_tx|Selector0~1 , uart_tx|Selector0~1, UART, 1
instance = comp, \uart_tx|tx~feeder , uart_tx|tx~feeder, UART, 1
instance = comp, \uart_tx|tx , uart_tx|tx, UART, 1
instance = comp, \button~input , button~input, UART, 1
